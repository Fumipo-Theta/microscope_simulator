!function(g){var I={};function n(t){if(I[t])return I[t].exports;var e=I[t]={i:t,l:!1,exports:{}};return g[t].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=g,n.c=I,n.d=function(g,I,t){n.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:t})},n.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},n.t=function(g,I){if(1&I&&(g=n(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var e in g)n.d(t,e,function(I){return g[I]}.bind(null,e));return t},n.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return n.d(I,"a",I),I},n.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/js/getMaxViewerSize.js\nfunction getMaxViewerSize() {\n    const topBarSpaceHeight = 200 // px\n    const width = window.innerWidth\n    const height = window.innerHeight - topBarSpaceHeight\n    return width < height ? width : height\n}\n\n// CONCATENATED MODULE: ./src/js/remote_repo/static/filter_by_category.js\nclass SampleFilter {\n    constructor(queries = []) {\n        this.queries = new Set(queries.map(this.listToQuery))\n    }\n\n    add(query) {\n        this.queries.add(this.listToQuery(query))\n    }\n\n    addMany(queries) {\n        queries.forEach(v => {\n            this.queries.add(this.listToQuery(v))\n        })\n    }\n\n    remove(value) {\n        this.queries.delete(this.listToQuery(value))\n    }\n\n    removeMany(values) {\n        values.forEach(v => {\n            this.queries.delete(this.listToQuery(v))\n        })\n    }\n\n    reset(queries) {\n        this.queries = new Set(queries.map(this.listToQuery))\n    }\n\n    list() {\n        return this.queries\n    }\n\n    listToQuery(path) {\n        return path.reduce((acc, e) => {\n            if (acc === "") return e\n            return acc + "::" + e\n        }, "")\n    }\n\n    filter(sampleList) {\n        if (this.queries.size === 0) return sampleList\n\n        const queries = [...this.queries].map(v => v.split("::"))\n        return sampleList.filter(sample => {\n            if (!sample.hasOwnProperty("category")) return false\n            const superset = new Set(sample.category)\n            for (let query of queries) {\n                if (isSubset(query, superset)) return true\n            }\n        })\n    }\n}\n\n\n/**\n *\n * @param {Set} set\n * @param {Set} superset\n */\nfunction isSubset(set, superset) {\n    if (set.size == 0) {\n        return true\n    }\n    for (let elem of set) {\n        if (!superset.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// CONCATENATED MODULE: ./src/js/local_storage/NativeLocalStorage.js\nclass NativeLocalStorage {\n    constructor() {\n        this.db = window.localStorage\n    }\n\n    put(key, value) {\n        this.db.setItem(key, value);\n    }\n\n    get(key) {\n        const value = this.db.getItem(key)\n        return (value == null)\n            ? undefined\n            : value\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/local_storage/DummyLocalStorage.js\nclass DummyLocalStorage {\n    constructor() {\n        this.db = {}\n    }\n\n    put(key, value) {\n        this.db[key] = value;\n    }\n\n    get(key) {\n        return (this.db.hasOwnProperty("key"))\n            ? this.db[key]\n            : undefined\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/config/config.js\n/**\n * TODO split these config as different objects\n *\n * - Package list endpoint\n * - Package CDN endpoint\n * - Cache DB version name\n * - Cache DB table name\n */\n\n\n\nclass Config {\n    constructor() {\n        this.endpoint = compileEnv == "production"\n            ? "https://d3uqzv7l1ih05d.cloudfront.net/" // Endpoint should be URL or\n            : "../../example_image_package_root/"      // relative path from deployed index.html\n\n        this.indexedDBName = "db_v3"\n        this.storageName = "files"\n    }\n\n    getSampleListURL() {\n        return this.endpoint + "rock_list.json"\n    }\n\n    getSampleCategoryURL() {\n        return this.endpoint + "category.json"\n    }\n\n    getImageDataPath(packageName) {\n        return this.endpoint + "packages/" + packageName + "/"\n    }\n\n    getDBName() {\n        return this.indexedDBName;\n    }\n\n    getStorageName() {\n        return this.storageName\n    }\n}\n\n\nconst compileEnv = "production"\n\nconsole.info("config.js: compileEnv: ", compileEnv)\n\nconst staticSettings = new Config()\n\nconst VIEW_PADDING = 0 // px\n\nconst cacheStorage = window.localStorage\n    ? new NativeLocalStorage()\n    : new DummyLocalStorage()\n\n// CONCATENATED MODULE: ./src/js/state/ui_state.js\n\n\n\nfunction overrideLanguageByLocalStorage(systemLanguage) {\n    const langInLocalStorage = cacheStorage.get("language")\n    const lang = (langInLocalStorage !== undefined)\n        ? langInLocalStorage\n        : systemLanguage;\n    document.querySelector("option[value=" + lang + "]").selected = true\n    return lang\n}\n\nfunction getSystemLanguage() {\n    const code = (window.navigator.languages && window.navigator.languages[0]) ||\n        window.navigator.language ||\n        window.navigator.userLanguage ||\n        window.navigator.browserLanguage;\n\n    const lang = code.match("ja") ? "ja" : "en";\n\n    return lang\n}\n\nconst uiState = {\n    "sampleFilter": new SampleFilter(),\n    "storedKeys": [],\n    "language": overrideLanguageByLocalStorage(getSystemLanguage()),\n}\n// CONCATENATED MODULE: ./src/js/state/viewer_state.js\n\n\nconst viewerState = {\n    "containorID": "",\n    "imageNumber": 1,\n    "canvasWidth": getMaxViewerSize() <= 500\n        ? getMaxViewerSize()\n        : 500,\n    "canvasHeight": getMaxViewerSize() <= 500\n        ? getMaxViewerSize()\n        : 500,\n    "imageRadius": 0,\n    "open_image_srcs": [],\n    "open_images": [],\n    "cross_image_srcs": [],\n    "cross_images": [],\n    "rotate": 0,\n    "rotate_axis_translate": [],\n    "isClockwise": true,\n    "isCrossNicol": false,\n    "drawHairLine": true,\n    "canRotate": true,\n}\n// CONCATENATED MODULE: ./src/js/state/initState.js\n\n\n\n\nfunction initState() {\n    return {\n        "isMousedown": false,\n        "drag_start": [0, 0],\n        "drag_end": [0, 0],\n        "uiState": uiState,\n        ...viewerState // TODO viewerState should be independent\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/package_manifest.js\nclass PackageManifest {\n    constructor() {\n        this.packageID = null\n        this.listName = {}\n        this.location = {}\n        this.owner = {}\n        this.rockType = {}\n        this.description = {}\n        this.geoSystem = ""\n        this.geoPosition = [null, null]\n        this.rotateCenter = [undefined, undefined]\n        this.rotateDirection = "clockwise"\n        this.imageSize = { "width": 0, "height": 0 }\n    }\n\n    toJSON() {\n        return {\n            "package-id": this.getPackageID(),\n            "list-name": this.getListName(),\n            "image_width": this.getImageWidth(),\n            "image_height": this.getImageHeight(),\n            "rotate_center": this.getRotateCenter(),\n            "cycle_rotate_degree": this.getRotateSectionDegree(),\n            "rotate_clockwise": this.isRotateClockwise(),\n            "rotate_by_degree": this.getEachRotateDegree(),\n            "location": this.getSampleLocation(),\n            "owner": this.getOwner(),\n            "rock_type": this.getRockType(),\n            "description": this.getDescription(),\n            "scale-unit": this.getScaleUnit(),\n            "scale-pixel": this.getScalePixel(),\n            "magnify": this.getMagnify(),\n            "sample_label": this.getSampleLabel(),\n            "geographic-coordinate": this.getGeoLocation(),\n            "image_formats": this.getImageFormats()\n        }\n    }\n\n    getSampleListEntry() {\n        return {\n            "package-name": this.getPackageID(),\n            "list-name": this.getListName()\n        }\n    }\n\n    setPackageID(id) {\n        this.packageID = id\n        return this\n    }\n\n    getPackageID() {\n        return this.packageID || ""\n    }\n\n    setListName(lang, s) {\n        this.listName[lang] = s;\n        return this;\n    }\n\n    getListName() {\n        return this.listName;\n    }\n\n    setSampleLocation(lang, desc) {\n        this.location[lang] = desc;\n        return this\n    }\n\n    getSampleLocation() {\n        return this.location;\n    }\n\n    setLocation(system, v1, v2) {\n        this.geoSystem = system,\n            this.geoPosition = [v1, v2]\n        return this\n    }\n\n    getGeoLocation() {\n        return {\n            "system": this.geoSystem,\n            "position": {\n                "latitude": this.geoPosition[0],\n                "longitude": this.geoPosition[1]\n            }\n        }\n    }\n\n    setMagnify(magnificationValue) {\n        this.magnify = magnificationValue\n        return this\n    }\n\n    getMagnify() {\n        return this.magnify\n    }\n\n    setScaleUnit(scaleUnit) {\n        this.scaleUnit = scaleUnit;\n        return this\n    }\n\n    getScaleUnit() {\n        return this.scaleUnit\n    }\n\n    setScalePixel(scaleLengthAsPixel) {\n        this.scalePixel = scaleLengthAsPixel\n        return this\n    }\n\n    getScalePixel() {\n        return this.scalePixel\n    }\n\n    setSampleLabel(s) {\n        this.sampleLabel = s\n    }\n\n    getSampleLabel() {\n        return this.sampleLabel || ""\n    }\n\n    setImageSize(img) {\n        this.imageSize = {\n            "width": img.width,\n            "height": img.height\n        }\n        return this\n    }\n\n    getImageWidth() {\n        return this.imageSize.width\n    }\n\n    getImageHeight() {\n        return this.imageSize.height\n    }\n\n    setRotateCenter(fromLeft, fromTop) {\n        this.rotateCenter = [fromLeft, fromTop]\n        return this\n    }\n\n    getRotateCenter() {\n        return [\n            this.rotateCenter[0] === undefined\n                ? this.getImageWidth() * 0.5\n                : this.rotateCenter[0],\n            this.rotateCenter[1] === undefined\n                ? this.getImageHeight() * 0.5\n                : this.rotateCenter[1]\n        ]\n    }\n\n    setImagesNumber(value) {\n        this.imagesNumber = value\n        return this\n    }\n\n    getImagesNumber() {\n        return this.imagesNumber\n    }\n\n    getRotateSectionDegree() {\n        return this.getEachRotateDegree() * (this.getImagesNumber() - 1)\n    }\n\n    setRotateDirection(direction) {\n        this.rotateDirection = direction\n        return this\n    }\n\n    isRotateClockwise() {\n        return this.rotateDirection === "clockwise"\n    }\n\n    setEachRotateDegree(degree) {\n        this.eachRotateDegree = degree\n        return this\n    }\n\n    getEachRotateDegree() {\n        return this.eachRotateDegree\n    }\n\n    setRockType(lang, desc) {\n        this.rockType[lang] = desc\n        return this\n    }\n\n    getRockType() {\n        return this.rockType\n    }\n\n    setOwner(lang, desc) {\n        this.owner[lang] = desc\n        return this\n    }\n\n    getOwner() {\n        return this.owner\n    }\n\n    setDescription(lang, desc) {\n        this.description[lang] = desc\n        return this\n    }\n\n    getDescription() {\n        return this.description\n    }\n\n    setImageFormats(formats) {\n        formats.forEach(format => {\n            console.assert(["webp", "jpg", "jp2"].includes(format))\n        })\n        this.imageFormats = formats\n    }\n\n    getImageFormats() {\n        return this.imageFormats || []\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/viewer_canvas.js\nconst viewer = document.querySelector("#main-viewer")\nconst viewer_ctx = viewer.getContext("2d")\n\n// CONCATENATED MODULE: ./src/js/updateViewerGeometry.js\n\n\n\nfunction updateViewerGeometry(state) {\n    return new Promise((res, rej) => {\n        const padding = 20 // px\n        state.canvasWidth = getMaxViewerSize() - padding\n        state.canvasHeight = getMaxViewerSize() - padding\n\n        viewer.width = state.canvasWidth\n        viewer.height = state.canvasHeight\n        viewer_ctx.translate(state.canvasWidth * 0.5, state.canvasHeight * 0.5)\n        res(state)\n    })\n}\n\n// CONCATENATED MODULE: ./src/js/sanitizeID.js\nfunction sanitizeID(id) {\n    return id.replace(/\\//g, "_").replace(/\\./g, "")\n}\n\n// CONCATENATED MODULE: ./src/js/rotation_degree_handlers.js\nconst stepBy = unit => val => Math.floor(val / unit)\n\nconst cycleBy = unit => val => {\n    const cycle_count = Math.floor(val / unit)\n    return val < 0\n        ? val + unit\n        : (unit <= val)\n            ? val - unit * cycle_count\n            : val\n}\n\nconst rotation_degree_handlers_mirrorBy = (center) => val => val > center ? 2 * center - val : val\n\nconst isInverse = degree => (180 <= degree)\n\nconst rotateSign = (clockwise = true) => clockwise ? -1 : 1\n\n// CONCATENATED MODULE: ./src/js/updateStateByMeta.js\n\n\n\nfunction getRotationCenter(meta) {\n    return (meta.hasOwnProperty("rotate_center"))\n        ? {\n            "to_right": meta.rotate_center[0],\n            "to_bottom": meta.rotate_center[1]\n        }\n        : {\n            "to_right": meta.image_width * 0.5,\n            "to_bottom": meta.image_height * 0.5\n        }\n}\n\nfunction getImageRadius(meta) {\n    const shift = getRotationCenter(meta);\n    const image_center = {\n        "x": meta.image_width * 0.5,\n        "y": meta.image_height * 0.5\n    }\n    return Math.min(\n        image_center.x - Math.abs(image_center.x - shift.to_right),\n        image_center.y - Math.abs(image_center.y - shift.to_bottom)\n    )\n}\n\nfunction mapMetadata(meta) {\n    const rotate_degree_step = parseInt(meta.rotate_by_degree)\n\n    return {\n        isClockwise: meta.rotate_clockwise,\n        location: meta.location,\n        rockType: meta.rock_type,\n        owner: meta.owner,\n        description: meta.hasOwnProperty("discription")\n            ? meta.discription\n            : meta.hasOwnProperty("description")\n                ? meta.description\n                : {},\n        rotate_center: getRotationCenter(meta),\n        imageWidth: meta.image_width,\n        imageHeight: meta.image_height,\n        imageRadius: getImageRadius(meta),\n        imageRadiusOriginal: getImageRadius(meta),\n        scaleWidth: meta.hasOwnProperty("scale-pixel")\n            ? parseInt(meta["scale-pixel"])\n            : false,\n        scaleText: meta.hasOwnProperty("scale-unit")\n            ? meta["scale-unit"]\n            : false,\n        rotate_degree_step: rotate_degree_step\n    }\n}\n\nfunction updateStateByMeta(state) {\n    return (containorID, meta) => new Promise((res, rej) => {\n\n        state.containorID = sanitizeID(containorID);\n\n        const rotate_degree_step = parseInt(meta.rotate_by_degree)\n        const cycle_degree = meta.hasOwnProperty("cycle_rotate_degree")\n            ? parseInt(meta.cycle_rotate_degree)\n            : 90;\n        const image_number = cycle_degree / rotate_degree_step + 1\n        const mirror_at = (image_number - 1)\n        const total_step = (image_number - 1) * 2\n\n        state.image_number = image_number\n        state.getImageNumber = cycle_degree > 0\n            ? degree => cycleBy(image_number - 1)(\n                stepBy(rotate_degree_step)(state.isClockwise ? 360 - degree : degree)\n            )\n            : degree => mirrorBy(mirror_at)(\n                cycleBy(total_step)(\n                    stepBy(rotate_degree_step)(degree)\n                )\n            )\n\n        state.getAlpha = degree => {\n            const nth = cycleBy(total_step * 2)(\n                stepBy(rotate_degree_step)(degree)\n            )\n            return 1 - (degree - rotate_degree_step * nth) / rotate_degree_step\n        }\n\n        state.open_images = []\n        state.cross_images = []\n\n        state.rotate = 0;\n\n        state = Object.assign(state, mapMetadata(meta))\n\n        res(state)\n    })\n}\n\n// CONCATENATED MODULE: ./src/js/viewer_handlers.js\n\n\nconst hideWelcomeBoard = state => {\n    const board = document.querySelector("#welcome-card")\n    board.classList.add("inactive");\n    return state\n}\n\nconst showViewer = state => {\n    const card = document.querySelector("#viewer_wrapper")\n    card.classList.remove("inactive")\n    return state\n}\n\nconst showNicolButton = state => {\n    const button = document.querySelector("#low-navigation")\n    button.classList.remove("inactive");\n    return state\n}\n\n// CONCATENATED MODULE: ./src/js/clipGeometryFromImageCenter.js\nfunction clipGeometoryFromImageCenter(state) {\n\n    return [\n        state.rotate_center.to_right - state.imageRadius,\n        state.rotate_center.to_bottom - state.imageRadius,\n        state.imageRadius * 2,\n        state.imageRadius * 2\n    ]\n}\n\n// CONCATENATED MODULE: ./src/js/draw_state_updators.js\n\n\n\n\n\nfunction clearView(state) {\n    viewer_ctx.clearRect(-state.canvasWidth * 0.5, -state.canvasHeight * 0.5, state.canvasWidth, state.canvasHeight)\n    return state\n}\n\nfunction blobToCanvas(state) {\n\n    const image_srcs = state.isCrossNicol\n        ? state.cross_images\n        : state.open_images\n\n    // view window circle\n\n    viewer_ctx.save()\n    viewer_ctx.beginPath()\n    viewer_ctx.arc(0, 0, state.canvasWidth / 2 - VIEW_PADDING, 0, Math.PI * 2, false)\n    viewer_ctx.clip()\n\n    // Draw a image\n    const alpha = state.getAlpha(state.rotate)\n\n    viewer_ctx.rotate(\n        rotateSign(state.isClockwise) * (state.rotate + state.getImageNumber(state.rotate) * state.rotate_degree_step) / 180 * Math.PI\n    )\n\n    viewer_ctx.globalAlpha = 1\n    const image1 = image_srcs[state.getImageNumber(state.rotate)]\n\n    try {\n        viewer_ctx.drawImage(\n            image1,\n            ...clipGeometoryFromImageCenter(state),\n            -state.canvasWidth / 2,\n            -state.canvasHeight / 2,\n            state.canvasWidth,\n            state.canvasHeight\n        );\n    } catch (e) {\n\n    }\n\n    viewer_ctx.restore()\n\n    // Draw next image\n    viewer_ctx.save()\n    viewer_ctx.beginPath()\n    viewer_ctx.arc(0, 0, state.canvasWidth / 2 - VIEW_PADDING, 0, Math.PI * 2, false)\n    viewer_ctx.clip()\n\n    viewer_ctx.rotate(\n        rotateSign(state.isClockwise) * (state.rotate + state.getImageNumber(state.rotate + state.rotate_degree_step) * state.rotate_degree_step) / 180 * Math.PI\n    )\n\n    viewer_ctx.globalAlpha = 1 - alpha\n    const image2 = image_srcs[state.getImageNumber(state.rotate + state.rotate_degree_step)]\n    try {\n        viewer_ctx.drawImage(\n            image2,\n            ...clipGeometoryFromImageCenter(state),\n            -state.canvasWidth / 2,\n            -state.canvasHeight / 2,\n            state.canvasWidth,\n            state.canvasHeight)\n    } catch (e) {\n\n    }\n    viewer_ctx.restore()\n    return state\n}\n\nfunction drawHairLine(state) {\n    if (!state.drawHairLine) return\n    viewer_ctx.strokeStyle = state.isCrossNicol\n        ? "white"\n        : "black";\n    viewer_ctx.globalAlpha = 1\n    viewer_ctx.beginPath()\n    viewer_ctx.moveTo(0, -state.canvasHeight * 0.5 + VIEW_PADDING)\n    viewer_ctx.lineTo(0, state.canvasHeight * 0.5 - VIEW_PADDING)\n    viewer_ctx.moveTo(-state.canvasWidth * 0.5 + VIEW_PADDING, 0)\n    viewer_ctx.lineTo(state.canvasWidth * 0.5 - VIEW_PADDING, 0)\n    viewer_ctx.closePath()\n    viewer_ctx.stroke()\n    return state\n}\n\nconst scaleLength = (canvasWidth, imageWidth, scaleWidth) => canvasWidth * scaleWidth / imageWidth\n\nfunction drawScale(state) {\n    if (!state["scaleWidth"]) return;\n    let scalePixel = scaleLength(state.canvasWidth, state.imageRadius * 2, state.scaleWidth)\n    const canvasWidth = state.canvasWidth;\n    const scaleBar = document.querySelector("#scalebar")\n\n\n    let scaleNumber = state.scaleText.match(/(\\d+\\.?\\d*)/)[0] * 1\n    const scaleUnit = state.scaleText.match(/\\D*$/)[0]\n\n    while (scalePixel >= canvasWidth) {\n        scalePixel *= 0.5\n        scaleNumber *= 0.5\n    }\n    scaleBar.style.width = scalePixel + "px";\n    scaleBar.querySelector("div:first-child").innerHTML = `${scaleNumber} ${scaleUnit}`;\n    return state\n}\n\n// CONCATENATED MODULE: ./src/js/getCoordinateOnCanvas.js\nfunction getCoordinateOnCanvas(canvas) {\n    return (e, fingur = 0) => {\n        if (e instanceof MouseEvent) {\n            return (e instanceof WheelEvent)\n                ? [\n                    e.deltaX,\n                    e.deltaY\n                ]\n                : [\n                    e.pageX - canvas.offsetLeft,\n                    e.pageY - canvas.offsetTop\n                ]\n        } else if (e instanceof TouchEvent && e.touches.length > fingur) {\n            return [\n                e.touches[fingur].pageX - canvas.offsetLeft,\n                e.touches[fingur].pageY - canvas.offsetTop\n            ]\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/radiunBetween.js\nfunction radiunBetween(cx, cy) {\n    return (_x1, _y1, _x2, _y2) => {\n        const x1 = _x1 - cx\n        const x2 = _x2 - cx\n        const y1 = _y1 - cy\n        const y2 = _y2 - cy\n\n        const cos = (x1 * x2 + y1 * y2) / Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))\n        return Math.sign(x1 * y2 - x2 * y1) * Math.acos(cos)\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/coordinate_updators.js\n\n\n\n\n\nconst canvasCoordinate = getCoordinateOnCanvas(viewer)\n\n/**\n * Update start and end position\n * @param {*} state\n * @param {*} e\n */\nfunction updateCoordinate(state, e) {\n    state.drag_start = state.drag_end || undefined\n    state.drag_end = canvasCoordinate(e)\n\n    state.pinch_start = state.pinch_end || undefined\n    state.pinch_end = canvasCoordinate(e, 1)\n    return state\n}\n\n/**\n * Calculate small difference of rotation.\n * Update total rotation.\n *\n * @param {*} state\n * @param {*} e\n */\nfunction updateRotate(state, e) {\n    if (!state.canRotate) return;\n    if (state.drag_start === undefined) return\n    // delta rotate radius\n    const rotate_end = radiunBetween(\n        state.canvasWidth * 0.5,\n        state.canvasHeight * 0.5\n    )(...state.drag_end, ...state.drag_start)\n\n    state.rotate += rotate_end / Math.PI * 180\n    if (state.rotate >= 360) {\n        state.rotate -= 360\n    } else if (state.rotate < 0) {\n        state.rotate += 360\n    }\n    return state\n}\n\n// CONCATENATED MODULE: ./src/js/rotateImage.js\n\n\n\nfunction rotateImage(state, e) {\n    return () => {\n        updateCoordinate(state, e)\n        updateRotate(state, e)\n        blobToCanvas(state)\n        drawHairLine(state)\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/updateMagnify.js\n\n\nfunction updateMagnifyByPinch(state, e) {\n    if (state.drag_start === undefined) return\n    if (state.pinch_start === undefined) return\n\n    const x1 = [...state.drag_start]\n    const y1 = [...state.pinch_start]\n    const x2 = [...state.drag_end]\n    const y2 = [...state.pinch_end]\n\n    const expansion = Math.sqrt((x2[0] - y2[0]) ** 2 + (x2[1] - y2[1]) ** 2) / Math.sqrt((x1[0] - y1[0]) ** 2 + (x1[1] - y1[1]) ** 2)\n\n    const newRadius = (expansion > 2)\n        ? state.imageRadius\n        : state.imageRadius / expansion\n    state.imageRadius = (newRadius) > state.imageRadiusOriginal\n        ? state.imageRadiusOriginal\n        : (newRadius < 100)\n            ? 100\n            : newRadius\n    return state\n}\n\nfunction updateMagnifyByWheel(state, e) {\n    const scrolled = canvasCoordinate(e)[1]\n\n    const newRadius = state.imageRadius + scrolled\n    state.imageRadius = (newRadius) > state.imageRadiusOriginal\n        ? state.imageRadiusOriginal\n        : (newRadius < 100)\n            ? 100\n            : newRadius\n    return state\n}\n\n// CONCATENATED MODULE: ./src/js/pinchImage.js\n\n\n\n\nfunction pinchImage(state, e) {\n    return () => {\n        updateCoordinate(state, e)\n        updateMagnifyByPinch(state, e)\n        blobToCanvas(state)\n        drawHairLine(state)\n        drawScale(state)\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/touchEventHandlers.js\n\n\n\n\nconst touchStartHandler = state => e => {\n    state.isMousedown = true\n    state.drag_end = canvasCoordinate(e)\n    e.preventDefault();\n}\n\nconst touchMoveHandler = state => e => {\n    if (!state.isMousedown) return\n    if (e instanceof MouseEvent || e.touches.length === 1) {\n        e.preventDefault();\n        requestAnimationFrame(\n            rotateImage(state, e)\n        )\n    } else if (e.touches.length === 2) {\n        e.preventDefault()\n        requestAnimationFrame(\n            pinchImage(state, e)\n        )\n    }\n}\n\nconst touchEndHandler = state => e => {\n    state.isMousedown = false\n    state.drag_end = undefined\n    state.pinch_end = undefined\n    e.preventDefault()\n}\n\n// CONCATENATED MODULE: ./src/js/wheelImage.js\n\n\n\nfunction wheelImage(state, e) {\n    return () => {\n        updateMagnifyByWheel(state, e)\n        blobToCanvas(state)\n        drawHairLine(state)\n        drawScale(state)\n    }\n}\n\n// CONCATENATED MODULE: ./src/js/wheelEventHandler.js\n\n\nconst wheelHandler = state => e => {\n    e.preventDefault();\n    requestAnimationFrame(\n        wheelImage(state, e)\n    )\n}\n\n// CONCATENATED MODULE: ./src/js/index_make_package.js\n\n\n\n\n\n\n\n\n\n\n\nconst packageMap = new PackageManifest();\nconst upload_state = Object.assign(\n    initState(),\n    {\n        "loadImages": [false, true],\n        "autoRotate": false,\n        "viewMode": "validation",\n        "language": "ja",\n        "desiredImageSize": 150,\n        "desiredThumbnailImageSize": 100,\n    }\n)\n\nfunction bothImagesLoaded(flags) {\n    return flags.reduce((acc, e) => acc && e, true)\n}\n\nfunction fileSelectHander(e) {\n    function read(file) {\n        return new Promise((res, rej) => {\n            const reader = new FileReader()\n            reader.readAsDataURL(file)\n            reader.onloadend = function () {\n                res(reader.result)\n            };\n        })\n    }\n\n    return new Promise((res, rej) => {\n        const files = e.target.files;\n        Promise.all(\n            Array.from(files)\n                .map(file => read(file))\n        ).then(res)\n    })\n}\n\nfunction readImageSize(state) {\n    packageMap.setImageSize(state.open_images[0])\n    return state\n}\n\nfunction readImagesNumber(state) {\n    packageMap.setImagesNumber(state.open_images.length)\n    return state\n}\n\nasync function showImages(state) {\n    readImageSize(state)\n    readImagesNumber(state)\n    const new_state = await updateStateByMeta(state, "upload")(packageMap.packageID, packageMap.toJSON())\n\n    new_state.open_images = await Promise.all(state.open_image_srcs.map(loadImageFromSrc))\n    new_state.cross_images = await Promise.all(state.cross_image_srcs.map(loadImageFromSrc))\n\n    return updateView(new_state)\n        .then(showViewer)\n        .then(showNicolButton)\n}\n\nfunction loadImageFromSrc(src) {\n    return new Promise((res, rej) => {\n\n        const img = new Image()\n\n        img.onload = _ => {\n            res(img)\n        }\n\n        img.src = src\n\n    })\n}\n\nfunction openImagesSelectHandler(state) {\n    return e => new Promise(async (res, rej) => {\n        state.open_image_srcs = await fileSelectHander(e)\n        state.loadImages[0] = true\n        state.open_images = await Promise.all(state.open_image_srcs.map(loadImageFromSrc))\n        await showImages(state)\n\n        res(state)\n    })\n}\n\nfunction crossImagesSelectHandler(state) {\n    return e => new Promise(async (res, rej) => {\n        state.cross_image_srcs = await fileSelectHander(e)\n        state.loadImages[1] = true\n        state.cross_images = await Promise.all(state.cross_image_srcs.map(loadImageFromSrc))\n        await showImages(state)\n\n        res(state)\n    })\n}\n\nasync function updateView(state) {\n    clearView(state)\n    blobToCanvas(state)\n    drawHairLine(state)\n    drawScale(state)\n    return state\n}\n\n\nfunction activateDom(selector) {\n    Array.from(document.querySelectorAll(selector))\n        .forEach(dom => {\n            dom.classList.remove("inactive")\n        })\n}\n\n\nfunction base64ToBlob(base64, mime) {\n    var binary = atob(base64);\n    var buffer = new Uint8Array(binary.length)\n    for (var i = 0; i < binary.length; i++) {\n        buffer[i] = binary.charCodeAt(i);\n    }\n    return new Blob([buffer.buffer], {\n        type: mime\n    });\n}\n\nfunction compressImageSrc(src, format, desiredKByte = 150) {\n    console.assert(["jpeg", "webp"].includes(format))\n\n    const image = new Image()\n    image.src = src\n    const w = image.width\n    const h = image.height\n    const cvs = document.querySelector("#working_canvas")\n    cvs.width = w\n    cvs.height = h\n    const ctx = cvs.getContext("2d")\n    ctx.drawImage(image, 0, 0, w, h)\n\n    const originalBinary = cvs.toDataURL(`image/${format}`); //画質落とさずバイナリ化\n    const mime = originalBinary.match(/(:)([a-z\\/]+)(;)/)[2]\n\n    const originalBlob = base64ToBlob(originalBinary.split(",")[1], mime);\n\n    if (desiredKByte * 1e3 < originalBlob["size"]) {\n        const capacityRatio = desiredKByte * 1e3 / originalBlob["size"];\n        const processingBinary = cvs.toDataURL(`image/${format}`, capacityRatio); //画質落としてバイナリ化\n        return base64ToBlob(processingBinary.split(",")[1], mime);\n    } else {\n        return originalBlob\n    }\n}\n\nfunction showErrorMessage(domId, message) {\n    const messageDom = document.querySelector(domId)\n    messageDom.innerHTML = message\n    messageDom.classList.remove("inactive")\n}\n\nfunction hideErrorMessage(domId) {\n    const messageDom = document.querySelector(domId)\n    messageDom.classList.add("inactive")\n}\n\n\nfunction sendSampleListEntry(json_obj) {\n    if (json_obj["package-name"].match(new RegExp("^[0-9a-zA-Z_-]+$")) === null) {\n        throw new Error("Package ID should contain only number, alphabet, _, and -.")\n    }\n    if (Object.keys(json_obj["list-name"]).length === 0) {\n        throw new Error("Sample title is not set.")\n    }\n    document.querySelector("#dev_sample_list_entry").innerHTML = JSON.stringify(json_obj, null, 2)\n};\n\nfunction initializeOrUpdateInput(inputDom, value) {\n    if (!inputDom.value) {\n        inputDom.value = value\n    }\n}\n\nfunction showPackageSize(state) {\n    // Sum open and cross images (contains thumbnail)\n    const imagesSize = (state.open_image_srcs.length * state.desiredImageSize + state.desiredThumbnailImageSize) * 2\n    document.querySelector("#message_package_size").innerHTML = imagesSize\n}\n\n(function (state) {\n    document.querySelector("#input_package_id").addEventListener(\n        "change",\n        e => {\n            packageMap.setPackageID(e.target.value)\n        },\n        false\n    )\n\n    document.querySelector("#input_desired_image_size").addEventListener(\n        "change",\n        e => {\n            state.desiredImageSize = parseFloat(e.target.value)\n            showPackageSize(state)\n        },\n        false\n    )\n\n    document.querySelector("#input_desired_thumbnail_image_size").addEventListener(\n        "change",\n        e => {\n            state.desiredThumbnailImageSize = parseFloat(e.target.value)\n            showPackageSize(state)\n        },\n        false\n    )\n\n    const centerToRight = document.querySelector("#rotate_center_from_left")\n    centerToRight.addEventListener(\n        "change",\n        e => {\n            state.rotate_center.to_right = parseFloat(centerToRight.value)\n            updateView(state)\n        },\n        false\n    )\n    const centerToBottom = document.querySelector("#rotate_center_from_top")\n    centerToBottom.addEventListener(\n        "change",\n        e => {\n            state.rotate_center.to_bottom = parseFloat(centerToBottom.value)\n            updateView(state)\n        },\n        false\n    )\n\n    document.querySelector("#open_nicol_images").addEventListener(\n        "change",\n        e => {\n            openImagesSelectHandler(state)(e).then(state => {\n                initializeOrUpdateInput(centerToRight, state.open_images[0].width / 2)\n                initializeOrUpdateInput(centerToBottom, state.open_images[0].height / 2)\n                showPackageSize(state)\n            })\n        },\n        false\n    )\n\n    document.querySelector("#cross_nicol_images").addEventListener(\n        "change",\n        e => {\n            crossImagesSelectHandler(state)(e).then(state => {\n                initializeOrUpdateInput(centerToRight, state.cross_images[0].width / 2)\n                initializeOrUpdateInput(centerToBottom, state.cross_images[0].height / 2)\n                showPackageSize(state)\n            })\n        },\n        false\n    )\n\n    const rotateDirectionSelector = document.querySelector("#select_rotate_direction")\n    rotateDirectionSelector.addEventListener(\n        "change",\n        e => {\n            const direction = e.target.options[e.target.selectedIndex].value\n            packageMap.setRotateDirection(direction)\n        },\n        false\n    )\n\n    const inputRotationInterval = document.querySelector("#input_rotation_interval")\n    inputRotationInterval.addEventListener(\n        "change",\n        e => {\n            packageMap.setEachRotateDegree(inputRotationInterval.value)\n            activateDom("#select_image_wrapper")\n        },\n        false\n    )\n\n    const inputScaleUnit = document.querySelector("#input_scale_unit")\n    inputScaleUnit.addEventListener(\n        "change",\n        e => {\n            packageMap.setScaleUnit(inputScaleUnit.value)\n        },\n        false\n    )\n\n    const inputScaleLength = document.querySelector("#input_scale_length")\n    inputScaleLength.addEventListener(\n        "change",\n        e => {\n            packageMap.setScalePixel(inputScaleLength.value)\n        },\n        false\n    )\n\n    const inputMagnification = document.querySelector("#input_magnification")\n    inputMagnification.addEventListener(\n        "change",\n        e => {\n            packageMap.setMagnify(e.target.value)\n        },\n        false\n    )\n\n    const inputSampleLabel = document.querySelector("#input_sample_label")\n    inputSampleLabel.addEventListener(\n        "change",\n        e => {\n            packageMap.setSampleLabel(e.target.value)\n        },\n        false\n    )\n\n    Array.from(document.querySelectorAll(".input_sample_location")).forEach(dom => {\n        dom.addEventListener(\n            "change",\n            e => {\n                packageMap.setSampleLocation(e.target.dataset.lang, e.target.value)\n            },\n            false\n        )\n    })\n\n    Array.from(document.querySelectorAll(".input_sample_type")).forEach(dom => {\n        dom.addEventListener(\n            "change",\n            e => {\n                packageMap.setRockType(e.target.dataset.lang, e.target.value)\n            },\n            false\n        )\n    })\n\n    Array.from(document.querySelectorAll(".input_description")).forEach(dom => {\n        dom.addEventListener(\n            "change",\n            e => {\n                packageMap.setDescription(e.target.dataset.lang, e.target.value)\n            },\n            false\n        )\n    })\n\n    Array.from(document.querySelectorAll(".input_sample_title"))\n        .forEach(dom => {\n            dom.addEventListener(\n                "change",\n                e => {\n                    packageMap.setListName(e.target.dataset.lang, e.target.value)\n\n                }\n            )\n        })\n\n    Array.from(document.querySelectorAll(".input_owner")).forEach(dom => {\n        dom.addEventListener(\n            "change",\n            e => {\n                packageMap.setOwner(e.target.dataset.lang, e.target.value)\n            },\n            false\n        )\n    })\n\n    const toggleNicolButton = document.querySelector("#change_nicol")\n    const toggleNicolLabel = document.querySelector("#change_nicol + label")\n\n    const toggleNicolHandler = state => new Promise((res, rej) => {\n\n        toggleNicolButton.checked = state.isCrossNicol\n        state.isCrossNicol = !state.isCrossNicol;\n\n        res(state)\n    })\n\n    toggleNicolButton.addEventListener(\n        "click",\n        e => { e.preventDefault() },\n        false\n    )\n\n\n    toggleNicolLabel.addEventListener(\n        "touch",\n        e => { e.preventDefault() },\n        false\n    )\n\n    toggleNicolButton.addEventListener(\n        "touch",\n        e => { e.preventDefault() },\n        false\n    )\n\n\n    toggleNicolLabel.addEventListener(\n        "mouseup",\n        e => toggleNicolHandler(state)\n            .then(updateView),\n        false\n    )\n\n    toggleNicolLabel.addEventListener(\n        "touchend",\n        e => toggleNicolHandler(state)\n            .then(updateView)\n            .then(_ => {\n                if (e.cancelable) {\n                    e.preventDefault();\n                }\n            }),\n        false\n    )\n\n    viewer.oncontextmenu = function (e) {\n        const position_on_canvas = canvasCoordinate(e)\n        const current_rotate_center = Object.values(state.rotate_center)\n        const shift = [\n            position_on_canvas[0] - state.canvasWidth * 0.5,\n            position_on_canvas[1] - state.canvasHeight * 0.5\n        ]\n\n        state.rotate_center.to_right += parseInt(shift[0] * state.imageRadius / state.canvasWidth * 2)\n        state.rotate_center.to_bottom += parseInt(shift[1] * state.imageRadius / state.canvasWidth * 2)\n\n        packageMap.setRotateCenter(\n            state.rotate_center.to_right,\n            state.rotate_center.to_bottom\n        )\n\n        centerToRight.value = state.rotate_center.to_right\n        centerToBottom.value = state.rotate_center.to_bottom\n\n        e.preventDefault()\n        updateView(state)\n        return false;\n    }\n\n    viewer.addEventListener(\n        "mousedown",\n        touchStartHandler(state),\n        false\n    )\n\n    viewer.addEventListener(\n        "dragstart",\n        e => { e.preventDefault() },\n        false\n    )\n\n    viewer.addEventListener(\n        "drag",\n        e => { e.preventDefault() },\n        false\n    )\n\n    viewer.addEventListener(\n        "dragend",\n        e => { e.preventDefault() },\n        false\n    )\n\n    viewer.addEventListener(\n        "touchstart",\n        touchStartHandler(state),\n        false\n    )\n\n    viewer.addEventListener(\n        "mousemove",\n        touchMoveHandler(state),\n        false\n    )\n\n    viewer.addEventListener(\n        "touchmove",\n        touchMoveHandler(state),\n        false\n    )\n\n    viewer.addEventListener(\n        "mouseup",\n        touchEndHandler(state),\n        false\n    )\n\n    viewer.addEventListener(\n        "touchend",\n        touchEndHandler(state),\n        false\n    )\n\n    viewer.addEventListener(\n        "wheel",\n        wheelHandler(state),\n        false\n    )\n\n    document.querySelector("#create_package_button").addEventListener(\n        "click",\n        e => {\n            e.preventDefault()\n            async function makeZip() {\n                const listEntry = packageMap.getSampleListEntry()\n                sendSampleListEntry(listEntry)\n\n                const zip = new JSZip();\n                const jpgZip = new JSZip()\n                const webpZip = new JSZip()\n\n                if (state.open_image_srcs.length === 0) {\n                    throw new Error("No open Nicol images are selected.")\n                }\n                if (state.cross_image_srcs.length === 0) {\n                    throw new Error("No crossed Nicol images are selected.")\n                }\n\n                // Thumbnails\n                zip.file("o1.jpg", compressImageSrc(state.open_image_srcs[0], "jpeg", state.desiredThumbnailImageSize))\n                zip.file("c1.jpg", compressImageSrc(state.cross_image_srcs[0], "jpeg", state.desiredThumbnailImageSize))\n\n                // Image sets\n                packageMap.setImageFormats(["webp", "jpg"])\n                state.open_image_srcs.forEach((src, i) => {\n                    webpZip.file(`o${i + 1}.webp`, compressImageSrc(src, "webp", state.desiredImageSize))\n                    jpgZip.file(`o${i + 1}.jpg`, compressImageSrc(src, "jpeg", state.desiredImageSize))\n                })\n                state.cross_image_srcs.forEach((src, i) => {\n                    webpZip.file(`c${i + 1}.webp`, compressImageSrc(src, "webp", state.desiredImageSize))\n                    jpgZip.file(`c${i + 1}.jpg`, compressImageSrc(src, "jpeg", state.desiredImageSize))\n                })\n\n                const meta = new Blob([JSON.stringify(packageMap.toJSON(), null, 2)], { "type": "text/json" });\n                zip.file("manifest.json", meta)\n                zip.file("webp.zip", await webpZip.generateAsync({ type: "blob" }))\n                zip.file("jpg.zip", await jpgZip.generateAsync({ type: "blob" }))\n                const zipContent = await zip.generateAsync({ type: "blob" })\n\n                const a = document.querySelector("#working_anchor")\n                a.download = `${packageMap.getPackageID()}.zip`\n                a.href = window.URL.createObjectURL(zipContent)\n                a.click()\n\n            }\n            makeZip()\n                .then(() => {\n                    hideErrorMessage("#error_make_package")\n                })\n                .catch(e => {\n                    showErrorMessage("#error_make_package", e)\n                })\n        },\n        false\n    )\n\n    updateViewerGeometry(state)\n})(upload_state)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);